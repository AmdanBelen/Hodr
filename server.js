var http = require('http'),
    Bot = require('telegram-bot-api'),
	fs = require('fs'),
	jQuery = require('jquery'),
	//botan = require('botanio')('yQgq2Rn02CkBIBf4H580BVW7UWIIx-Wj'),
	mongojs = require('mongojs'),
    format = require('util').format;
	

var db = mongojs('Hodrdb');
var users = db.collection('users');
var messages = db.collection('messages');
 
 
/*
DB Format
User:{
	_id:int, #Autogenerated
	current:int, #Defines current action: 1-9 = Settings, 10-16 = Others
	T_id:int, #From telegram , used for auth at bot
	Username:string, #@ from telegram , hidden until match
	Firstname:string, #From telegram
	Age:int, #User input min 16, max 99
	Sexe:int, #User input 0male, 1 female
	Bio:text, #User input, small text to present him self
	GPS:{X:int,Y:int}, #GPS coordinates
	Wanted:{
		min-age:int,
		max-age:int,
		sexe:int,
		distance:int	
	}
}

Matches:{
	T_id1:int, #T_id of active user
	T_id2:int, #T_id of target user
	status:bol, #0=down , 1=up 
	timestamp:int, #Input deleted after 1 month
}
*/

var Hodr = new Bot({
	token: '143487305:AAF4FZRlkyau2AYkuGlvE8ehORDGG7AbmZ8',
	updates: {
		//enabled: true
		enabled: false
	}
});


//-----------------------------------------//
//----------------FUNCTIONS----------------//
//-----------------------------------------//
function DataToDBUser(data){
	var DBUser={
		'_id':data.id,
		'Current':0, 
		'Username':data.username,
		'Firstname':data.first_name,
		'Age':0,
		'Sexe':'',
		'Bio':'',
		'GPS':{'X':0,'Y':0},
		'Wanted':{
			'min_age':0,
			'max_age':0,
			'sexe':2,
			'distance':0
		}
	};	
	return DBUser;
}
function LogMessage(message){
	console.log(message);
	console.log("@"+message.from.username+"("+message.from.id+")"+": "+message.text);
	messages.insert({T_id:message.from.id,
										sername:message.from.username,
										first_name:message.from.first_name,
										txt:message.text,
										date:message.date
										});	
}

function Handler(data){
	if(data.txt[0]=="/"){//if its a command
		Cmd_Handler(data);
	}else{
		Input_Handler(data);
	}
}
function Cmd_Handler(data){
	switch(data.text){
		case '/start':
			if(!db.users.findOne({'_id':data.T_id})){
				db.users.insert(DataToDBUser(data));
				Hodr.sendMessage(data.id, "Hello, you seem new here, please complete the profile setup by filling in the missing data...");
			}
			break;
		default:
			console.log("Unknown Command...");
		
	}
}
/*
Hodr.on('message', function(message){
		if(message.chat.type=="private"){
			new LogMessage(message);
		}	
});
*/
var _updatesOffset =0;
    function internalGetUpdates(){
        Hodr.getUpdates({
            offset: _updatesOffset,
            limit: 50,
            timeout: 0
        })
        .then(function (data){
            if (!data){
                console.error('[TelegramBot]: Failed to get updates from Telegram servers: No Data');
            }else{
                ('forEach' in data) && data.forEach(function (item){
                    _updatesOffset = (item.update_id >= _updatesOffset ? item.update_id + 1 : _updatesOffset);
					LogMessage(item.message);
                });
            }
            setTimeout(internalGetUpdates,2000);
        })
        .catch(function(err){
            console.error('[TelegramBot]: Failed to get updates from Telegram servers: '+err);
        });
    }

// USER SETTINGS PART // 
function Update_User(usrId,current){

}


internalGetUpdates();


// MATCHING //
/*
function rating(target){
	while(true){
		var kb = {
			keyboard: [
			['UP','DOWN'],
			],
			one_time_keyboard: true
		};
		//Hodr.sendMessage(target, "Sex + Name + Age");
		//Hodr.sendMessage(target, "Bio", undefined, undefined, kb);	
	}
}
*/